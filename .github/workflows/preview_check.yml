name: Preview Check

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        container:
            image: reactnativecommunity/react-native-android
        permissions:
            contents: read
            pull-requests: write
            issues: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Docker and Docker Compose
              run: |
                  sudo apt update
                  sudo apt install -y docker docker-compose

            - name: Install Node.js (v20) for React Native and Expo
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Install pnpm (package manager)
              run: npm i -g pnpm

            - name: Install Java (JDK 22) and enable caching for SBT dependencies
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '22.0.1'
                  cache: 'sbt'

            - name: Install SBT
              uses: coursier/setup-action@v1
              with:
                  apps: sbt

            - name: Cache SBT dependencies (Ivy2)
              uses: actions/cache@v3
              with:
                  path: ~/.ivy2/cache
                  key: sbt-${{ runner.os }}-${{ hashFiles('**/build.sbt') }}
                  restore-keys: sbt-${{ runner.os }}
                  max-size: 90M

            - name: Install Golang (v1.23.0) for backend services
              uses: actions/setup-go@v4
              with:
                  go-version: 1.23.0

            - name: Install Expo CLI and EAS CLI for React Native
              run: npm i -g expo-cli eas-cli

            - name: Configure EAS (Expo Application Services)
              uses: expo/expo-github-action@v8
              with:
                  eas-version: latest
                  token: ${{ secrets.EXPO_TOKEN }}

            - name: Set environment variables for Android build
              run: |
                  echo "ANDROID_KEYSTORE_PATH=./client-mobile/android/app/keystore.jks" >> $GITHUB_ENV
                  echo "ANDROID_KEYSTORE_PASSWORD=password" >> $GITHUB_ENV
                  echo "ANDROID_KEY_ALIAS=my-key" >> $GITHUB_ENV
                  echo "ANDROID_KEY_PASSWORD=password" >> $GITHUB_ENV

            # - name: Install Android SDK
            #   run: |
            #       sudo apt update
            #       sudo apt install -y android-sdk
            #       echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
            #       echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
            #       echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
            #       echo "$ANDROID_HOME/tools" >> $GITHUB_PATH

            # - name: Decode JKS KEY
            #   run: |
            #       cd ./client-mobile
            #       mkdir -p ./android/app
            #       echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > ./android/app/keystore.jks

            # - name: Build APK
            #   run: |
            #       cd ./client-mobile
            #       eas build --platform android --profile preview --non-interactive

            - name: Install React Native dependencies using pnpm
              run: |
                  pnpm install --dir ./client-mobile

            - name: Download dependencies for Golang services
              working-directory: ./server
              run: |
                  cd ./user-service && go mod download && cd ..
                  cd ./movie-service && go mod download && cd ..

            # - name: Run tests services
            #   working-directory: ./server
            #   run: |
            #       cd ./gateway-service/test && go test -v && cd ../..

            - name: Compile and run tests for Scala Gateway Service (SBT)
              run: |
                  cd ./server/gateway-service
                  sbt compile
                  sbt test

            - name: Build Golang User Server
              working-directory: ./server/user-service
              run: make build

            - name: Build Golang Movie Server
              working-directory: ./server/movie-service
              run: make build

            - name: Check port availability before starting services
              run: |
                  for port in 8080 8001 8011; do
                    if lsof -i :"$port"; then
                      echo "Port $port is already in use!";
                      exit 1;
                    else
                      echo "Port $port is available."
                    fi
                  done

            - name: Start all services using Docker Compose
              working-directory: ./server
              run: |
                  docker-compose -f docker-compose.dev.yml up --build -d
                  echo "Waiting for services to start..."
                  sleep 45

                  if ! docker-compose -f docker-compose.dev.yml ps | grep "Up"; then
                    echo "One or more containers have exited unexpectedly."
                    docker-compose -f docker-compose.dev.yml logs --tail=150
                    exit 1
                  fi

                  echo "All services are running successfully."

            - name: Verify running services
              working-directory: ./server
              run: |
                  docker-compose -f docker-compose.dev.yml ps
            - name: Clean up all Docker services
              run: docker system prune -af

name: Preview Check

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        container:
            image: reactnativecommunity/react-native-android
        permissions:
            contents: read
            pull-requests: write
            issues: write

        strategy:
            matrix:
                services: ['user-service', 'movie-service', 'gateway-service']

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup docker-compose
              run: |
                  id: buildx
                  uses: docker/setup-buildx-action@v2
              env:
                  DOCKER_COMPOSE_VERSION: 1.29.2

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Install pnpm
              run: npm i -g pnpm

            - name: Install Java and Android SDK
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '17'

            - name: Install GOlang
              uses: actions/setup-go@v4
              with:
                  go-version: 1.23.0

            - name: Install Expo CLI
              run: npm i -g expo-cli eas-cli

            - name: 🏗 Setup EAS
              uses: expo/expo-github-action@v8
              with:
                  eas-version: latest
                  token: ${{ secrets.EXPO_TOKEN }}

            - name: Set enviroment variables
              run: |
                  echo "ANDROID_KEYSTORE_PATH=./client-mobile/android/app/keystore.jks" >> $GITHUB_ENV
                  echo "ANDROID_KEYSTORE_PASSWORD=password" >> $GITHUB_ENV
                  echo "ANDROID_KEY_ALIAS=my-key" >> $GITHUB_ENV
                  echo "ANDROID_KEY_PASSWORD=password" >> $GITHUB_ENV

            # - name: Install Android SDK
            #   run: |
            #       sudo apt update
            #       sudo apt install -y android-sdk
            #       echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
            #       echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
            #       echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
            #       echo "$ANDROID_HOME/tools" >> $GITHUB_PATH

            # - name: Decode JKS KEY
            #   run: |
            #       cd ./client-mobile
            #       mkdir -p ./android/app
            #       echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > ./android/app/keystore.jks

            # - name: Build APK
            #   run: |
            #       cd ./client-mobile
            #       eas build --platform android --profile preview --non-interactive

            - name: Install packages React Native
              run: |
                  pnpm install --dir ./client-mobile

            - name: Install dependencies (${{ matrix.services }})
              working-directory: ./server/${{ matrix.services }}
              run: go mod download

            - name: Run tests (${{ matrix.services }})
              working-directory: ./server/${{ matrix.services }}/test
              run: go test -v

            - name: Build Golang Gateway Server
              run: |
                  cd ./server/gateway-service
                  make build

            # - name: Tests Gateway Server
            #   run: |
            #       cd ./server/gateway-service/test
            #       go test -v

            # USER SERVICE
            # - name: Install dependencies (user-service)
            #   working-directory: ./server/user-service
            #   run: |
            #       go mod download

            - name: Build Golang User Server
              working-directory: ./server/user-service
              run: make build

            # MOVIE SERVICE
            # - name: Install dependencies (movie-service)
            #   working-directory: ./server/movie-service
            #   run: |
            #       go mod download

            - name: Build Golang Movie Server
              working-directory: ./server/movie-service
              run: make build

            # Проверка свободного порта (Linux)
            - name: Check ports availability
              run: |
                  for port in 8080 8001 8011; do
                    if lsof -i :"$port"; then
                      echo "Port $port is already in use!";
                      exit 1;
                    else
                      echo "Port $port is available."
                    fi
                  done

            # - name: Check port -> 8001
            #   run: |
            #       if lsof -i :8001; then
            #         echo "Port 8001 exists!";
            #         exit 1;
            #       else
            #         echo "Port 8001 is free!";
            #       fi

            # - name: Check port -> 8011
            #   run: |
            #       if lsof -i :8011; then
            #         echo "Port 8011 exists!";
            #         exit 1;
            #       else
            #         echo "Port 8011 is free!";
            #       fi

            - name: Start docker-compose
              working-directory: ./server
              run: |
                  docker compose -f docker-compose.dev.yml up --build

#!/bin/sh
set -e

echo "Running pre-commit hook..."

# COLORS
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# при main ветки оставить этот код
# при комите в новую ветку этот код не выполняь только форматирование кода

# Получаем текущую ветку
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Получаем список измененных файлов
CHANGED_FILES=$(git diff --cached --name-only)

### React Native ###
if [ "$CURRENT_BRANCH" = "main" ] && echo "$CHANGED_FILES" | grep -qE '^client-mobile/'; then
    echo -e "${BLUE}Changes in 'client-mobile' directory detected.${NC}"

    echo -e "${GREEN}[|] Running formatted and build for client-mobile...${NC}"
    cd ./client-mobile
    pnpm format
    # pnpm test

    git add .
    echo -e "${GREEN}[+] Success formatted and build for client-mobile!${NC}"
    cd ..
elif echo "$CHANGED_FILES" | grep -qE '^client-mobile/'; then
    echo -e "${BLUE}Changes in 'client-mobile' directory detected. Only formatting will be done.${NC}"

    cd ./client-mobile
    pnpm format

    git add .
    echo -e "${GREEN}[+] Success formatted for client-mobile!${NC}"
    cd ..
else
    echo -e "${YELLOW}No changes in 'client-mobile' directory. Skipping actions for client-mobile.${NC}"
fi

### C# ###
if [ "$CURRENT_BRANCH" = "main" ] && echo "$CHANGED_FILES" | grep -qE '^client-windows/'; then
    echo -e "${BLUE}Changes in 'client-windows' directory detected.${NC}"

    echo -e "${GREEN}[|] Running formatted and build for client-windows...${NC}"
    cd ./client-windows
    # dotnet restore
    # dotnet build --configuration Release || { echo -e "${RED}C# build failed${NC}"; exit 1; }

    git add .
    echo -e "${GREEN}[+] Success formatted and build for client-windows!${NC}"
    cd ..
elif echo "$CHANGED_FILES" | grep -qE '^client-windows/'; then
    echo -e "${BLUE}Changes in 'client-windows' directory detected. Only formatting will be done.${NC}"
    cd ./client-windows
    # format!!!

    git add .
    echo -e "${GREEN}[+] Success formatted and build for client-windows!${NC}"
    cd ..
else
    echo -e "${YELLOW}No changes in 'client-windows' directory. Skipping actions for client-windows.${NC}"
fi

### Scala ###
if [ "$CURRENT_BRANCH" = "main" ] && echo "$CHANGED_FILES" | grep -qE '^server/gateway-service/'; then
    echo -e "${BLUE}Changes in 'gateway-service' directory detected.${NC}"

    echo -e "${GREEN}[|] Running formatted and build for gateway-service...${NC}"
    cd ./server/gateway-service
    sbt scalafmtAll
    sbt test
    sbt clean assembly

    git add .
    echo -e "${GREEN}[+] Success formatted and build for gateway-service!${NC}"
    cd ../../
elif echo "$CHANGED_FILES" | grep -qE '^server/gateway-service/'; then
    echo -e "${BLUE}Changes in 'gateway-service' directory detected. Only formatting will be done.${NC}"

    cd ./server/gateway-service
    sbt scalafmtAll
    cd ../../

    git add .
    echo -e "${GREEN}[+] Success formatted for gateway-service!${NC}"
else
    echo -e "${YELLOW}No changes in 'gateway-service' directory. Skipping actions for gateway-service.${NC}"
fi

if [ "$CURRENT_BRANCH" = "main" ] && echo "$CHANGED_FILES" | grep -qE '^server/broker-service/'; then
    echo -e "${BLUE}Changes in 'broker-service' directory detected.${NC}"

    echo -e "${GREEN}[|] Running formatted and build for broker-service...${NC}"
    cd ./server/broker-service
    sbt scalafmtAll
    # sbt test
    sbt clean assembly

    git add .
    echo -e "${GREEN}[+] Success formatted and build for broker-service!${NC}"
    cd ../../
elif echo "$CHANGED_FILES" | grep -qE '^server/broker-service/'; then
   echo -e "${BLUE}Changes in 'broker-service' directory detected. Only formatting will be done.${NC}"

   cd ./server/broker-service
   sbt scalafmtAll
   cd ../../

   git add .
   echo -e "${GREEN}[+] Success formatted for broker-service!${NC}"
else
    echo -e "${YELLOW}No changes in 'broker-service' directory. Skipping actions for gateway-service.${NC}"
fi

### Golang ###
if [ "$CURRENT_BRANCH" = "main" ] && echo "$CHANGED_FILES" | grep -qE '^server/user-service/'; then
    echo -e "${BLUE}Changes in 'user-service' directory detected.${NC}"

    echo -e "${GREEN}[|] Running formatted and build for user-service...${NC}"
    cd ./server/user-service
    go mod tidy
    gofmt -w .
    make build

    git add .
    echo -e "${GREEN}[+] Success formatted and build for user-service!${NC}"
    cd ../../
elif echo "$CHANGED_FILES" | grep -qE '^server/user-service/'; then
    echo -e "${BLUE}Changes in 'user-service' directory detected. Only formatting will be done.${NC}"

    cd ./server/user-service
    gofmt -w .

    git add .
    echo -e "${GREEN}[+] Success formatted for user-service!${NC}"
    cd ../../
else
    echo -e "${YELLOW}No changes in 'user-service' directory. Skipping actions for user-service.${NC}"
fi

### Golang ###
if [ "$CURRENT_BRANCH" = "main" ] && echo "$CHANGED_FILES" | grep -qE '^server/movie-service/'; then
    echo -e "${BLUE}Changes in 'movie-service' directory detected.${NC}"

    echo -e "${GREEN}[|] Running formatted and build for movie-service...${NC}"
    cd ./server/movie-service
    go mod tidy
    gofmt -w .
    make build

    git add .
    echo -e "${GREEN}[+] Success formatted and build for movie-service!${NC}"
    cd ../../
elif echo "$CHANGED_FILES" | grep -qE '^server/movie-service/'; then
    echo -e "${BLUE}Changes in 'movie-service' directory detected. Only formatting will be done.${NC}"

    cd ./server/movie-service
    gofmt -w .

    git add .
    echo -e "${GREEN}[+] Success formatted for movie-service!${NC}"
    cd ../../
else
    echo -e "${YELLOW}No changes in 'movie-service' directory. Skipping actions for movie-service.${NC}"
fi

### Golang ###
# if [ "$CURRENT_BRANCH" = "main" ] && echo "$CHANGED_FILES" | grep -qE '^server/blog-service/'; then
#     echo -e "${BLUE}Changes in 'blog-service' directory detected.${NC}"

#     echo -e "${GREEN}[|] Running formatted and build for blog-service...${NC}"
#     cd ./server/blog-service
#     go mod tidy
#     gofmt -w .
#     make build
#
#      git add .
#     echo -e "${GREEN}[+] Success formatted and build for blog-service!${NC}"
#     cd ../../
# elif echo "$CHANGED_FILES" | grep -qE '^server/blog-service/'; then
#    echo -e "${BLUE}Changes in 'blog-service' directory detected. Only formatting will be done.${NC}"
#
#    cd ./server/blog-service
#    gofmt -w .
#
#    git add .
#    echo -e "${GREEN}[+] Success formatted for blog-service!${NC}"
#    cd ../../
# else
#     echo -e "No changes in 'blog-service' directory. Skipping actions for blog-service."
# fi

echo "Husky is successfully!"

#!/bin/bash

set -e

# COLORS
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

TOTAL_STEPS=14
STEP=0
PIDS=""
increment_step() {
    STEP=$((STEP + 1))
    echo -e "${BLUE}[STEP $STEP/$TOTAL_STEPS] ${1}${NC}"
}

HOME="$(git rev-parse --show-toplevel)"
GO_VERSION="1.23.0"
OS=$(uname -s)

#########################################################
############### INSTALL DEPENDENCIES ####################
install_choco() {
    increment_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Chocolatey..."
    if ! command -v choco &>/dev/null; then
        echo -e "${YELLOW}Chocolatey –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        if [[ "$OS" == "MINGW64_NT"* || "$OS" == "CYGWIN"* || "$OS" == "Windows_NT"* ]]; then
            powershell.exe -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; \
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; \
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
        fi
    else
        echo -e "Chocolatey —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi
}

install_node() {
    increment_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Node.js..."
    if ! command -v node &>/dev/null; then
        echo -e "${YELLOW}Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        if [[ "$OS" == "Linux" ]]; then
            sudo apt update
            sudo apt install -y nodejs npm
        elif [[ "$OS" == "MINGW64_NT"* || "$OS" == "CYGWIN"* || "$OS" == "Windows_NT"* ]]; then
            choco install nodejs ###########################
        fi
    else
        echo -e "Node.js —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi
}

install_expo_cli() {
    increment_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Expo CLI..."
    if ! command -v expo &>/dev/null; then
        echo -e "${YELLOW}Expo CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        npm install -g expo-cli
    else
        echo -e "Expo CLI —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi
}

install_java() {
    increment_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Java..."
    if ! command -v java &>/dev/null || [[ $(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | cut -d '.' -f1) -lt 17 ]]; then
        echo -e "${YELLOW}Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ 17. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        if [[ "$OS" == "Linux" ]]; then
            sudo apt update
            sudo apt install -y openjdk-17-jdk
        elif [[ "$OS" == "MINGW64_NT"* || "$OS" == "CYGWIN"* || "$OS" == "Windows_NT"* ]]; then
            choco install openjdk17
        fi
    else
        echo -e "Java 17 –∏–ª–∏ –≤—ã—à–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
    fi
}

install_pnpm() {
    increment_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É pnpm..."
    if ! command -v pnpm &>/dev/null; then
        echo -e "${YELLOW}pnpm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        npm install -g pnpm
    else
        echo -e "pnpm —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi
}

install_sbt() {
    increment_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É sbt..."
    if ! command -v sbt &>/dev/null; then
        echo -e "${YELLOW}sbt –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        if [[ "$OS" == "Linux" ]]; then
            echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
            sudo apt update
            sudo apt install sbt
        elif [[ "$OS" == "MINGW64_NT"* || "$OS" == "CYGWIN"* || "$OS" == "Windows_NT"* ]]; then
            choco install sbt
        fi
    else
        echo -e "sbt —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi
}

install_golang() {
    increment_step "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Golang..."
    if ! command -v go &>/dev/null; then
        echo -e "${YELLOW}Golang –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        if [[ "$OS" == "Linux" ]]; then
            if ! command -v wget &> /dev/null; then
                echo "Installing wget..."
                sudo apt-get update
                sudo apt-get install -y wget
            fi

            # –°–∫–∞—á–∏–≤–∞–µ–º Go 1.23.0
            echo "Downloading Go ${GO_VERSION} for Linux..."
            wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            echo "Removing old Go installation if exists..."
            sudo rm -rf /usr/local/go

            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ /usr/local
            echo "Installing Go..."
            sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz

            if [[ ":$PATH:" != *":/usr/local/go/bin:"* ]]; then
                echo "Adding Go to PATH..."
                echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
                source ~/.bashrc
            fi
            rm go${GO_VERSION}.linux-amd64.tar.gz
        elif [[ "$OS" == "MINGW64_NT"* || "$OS" == "CYGWIN"* || "$OS" == "Windows_NT"* ]]; then
            choco install golang --version=${GO_VERSION} -y
            echo "Go version: $(go version)"
            echo -e "${GREEN}Go has been successfully installed!${NC}"
        fi
    else
        echo -e "Golang —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi
}

check_() {
    echo -e "${BLUE}–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤${NC}"

    install_choco
    install_node
    install_expo_cli
    install_java
    install_pnpm
    install_sbt
    install_golang
}

check_
################### END DEPENDENCIES ####################
#########################################################

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./develop.sh [–∫–æ–º–∞–Ω–¥–∞] [—Å–µ—Ä–≤–∏—Å]"
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  up      –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  down    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  build   –°–æ–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
}

build_service() {
    cd "$HOME"
    increment_step "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è..."

    increment_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
    for PORT in 8001 8011 8022 8080 8888; do
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç: ${PORT}"
        if [[ "$OS" == "Linux" ]]; then
            # –î–ª—è Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º netstat + grep –∏–ª–∏ ss
            PID=$(netstat -tulnp 2>/dev/null | grep ":$PORT" | awk '{print $7}' | cut -d'/' -f1)

            if [[ -z "$PID" ]]; then
                echo "‚úÖ –ü–æ—Ä—Ç $PORT —Å–≤–æ–±–æ–¥–µ–Ω!"
            else
                echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $PORT —Å PID: $PID"
                echo "üî™ –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å..."
                kill -9 $PID
                echo "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å $PID –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            fi
        elif [[ "$OS" == "MINGW64_NT"* || "$OS" == "CYGWIN"* || "$OS" == "Windows_NT"* ]]; then
            # –î–ª—è Windows (Git Bash, Cygwin, MinGW)
            PID=$(netstat -ano | grep ":$PORT" | awk '{print $5}' | tail -n 1)

            if [[ -z "$PID" ]]; then
                echo "‚úÖ –ü–æ—Ä—Ç $PORT —Å–≤–æ–±–æ–¥–µ–Ω!"
            else
                echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $PORT —Å PID: $PID"
                echo "üî™ –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å..."
                taskkill /F /PID "$PID"
                echo "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å $PID –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            fi
        else
            echo -e "${YELLOW}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°: $OS${NC}"
            exit 1
        fi
    done
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–¥–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
}

go_() {
    local go_service_path=$1

    increment_step "–ó–∞–ø—É—Å–∫ Go —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ $go_service_path..."
    cd "$HOME/$go_service_path" && make run &
    PIDS="$PIDS $!"
    echo -e "${GREEN}–ü—Ä–æ—Ü–µ—Å—Å Go —Å–µ—Ä–≤–∏—Å–∞ —Å PID: $!${NC}"
}

scala_() {
    local scala_service_path=$1
    # cd "$HOME/$scala_service_path"

    increment_step "–ó–∞–ø—É—Å–∫ Scala —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ $scala_service_path..."
    sbt compile && sbt clean assembly
    java -jar $HOME/$scala_service_path &
    PIDS="$PIDS $!"
    echo -e "${GREEN}–ü—Ä–æ—Ü–µ—Å—Å Scala —Å–µ—Ä–≤–∏—Å–∞ —Å PID: $!${NC}"

}

csharp_() {
    local csharp_service_path=$1

    increment_step "–ó–∞–ø—É—Å–∫ C# —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ $csharp_service_path..."
    dotnet $HOME/$csharp_service_path &
    PIDS="$PIDS $!"
    echo -e "${GREEN}–ü—Ä–æ—Ü–µ—Å—Å C# —Å–µ—Ä–≤–∏—Å–∞ —Å PID: $!${NC}"
}

cleanup() {
    echo -e "${RED}\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    for PID in $PIDS; do
        echo "üî™ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å PID: $PID"
        kill -9 $PID 2>/dev/null
    done
    echo -e "${GREEN}‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
    exit 0
}

trap cleanup SIGINT

build_service

##################################
########### SERVICE ##############
scala_ "server/gateway-service/target/scala-2.13/gateway-service-assembly-0.1.0.jar"
scala_ "server/broker-service/target/scala-2.13/broker-service-assembly-0.1.0.jar"
go_ "server/user-service"
go_ "server/movie-service"
########### SERVICE ##############
##################################

wait

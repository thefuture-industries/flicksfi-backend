#!/bin/bash

set -e

# COLORS
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

GO_VERSION="1.23.0"
HOME="$(git rev-parse --show-toplevel)"
FILE_CONFIG="client-mobile/services/config.service.ts"
FILE_GO_USER="server/user-service/main.go"
FILE_GO_MOVIE="server/movie-service/main.go"
FILE_GO_BLOG="server/blog-service/main.go"

if ! command -v go &>/dev/null; then
    echo -e "${YELLOW}Golang не найден. Устанавливаем...${NC}"
    if [[ "$OS" == "Linux" ]]; then
        if ! command -v wget &> /dev/null; then
            echo "Installing wget..."
            sudo apt-get update
            sudo apt-get install -y wget
        fi

        # Скачиваем Go 1.23.0
        echo "Downloading Go ${GO_VERSION} for Linux..."
        wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz

        # Удаляем старую версию если есть
        echo "Removing old Go installation if exists..."
        sudo rm -rf /usr/local/go

        # Распаковываем в /usr/local
        echo "Installing Go..."
        sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz

        if [[ ":$PATH:" != *":/usr/local/go/bin:"* ]]; then
            echo "Adding Go to PATH..."
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            source ~/.bashrc
        fi
        rm go${GO_VERSION}.linux-amd64.tar.gz
    elif [[ "$OS" == "MINGW64_NT"* || "$OS" == "CYGWIN"* || "$OS" == "Windows_NT"* ]]; then
        choco install golang --version=${GO_VERSION} -y
        echo "Go version: $(go version)"
        echo -e "${GREEN}Go has been successfully installed!${NC}"
    fi
else
    echo -e "Golang уже установлен."
fi

if ! command -v npm &>/dev/null; then
    echo "npm не найден, установка..."

    # Установка Node.js версии 23.x (например, 23.7.0)
    curl -fsSL https://deb.nodesource.com/setup_23.x | sudo -E bash -
    sudo apt-get install -y nodejs

    # Установка конкретной версии npm
    sudo npm install -g npm@7.0.0
else
    echo "npm уже установлен"
fi

if ! command -v pnpm &>/dev/null; then
    echo -e "${YELLOW}pnpm не найден. Устанавливаем...${NC}"
    npm install -g pnpm
else
    echo -e "pnpm уже установлен."
fi

cd "$HOME/server/user-service"
for file in $(find . -type f -name "*.go"); do
    if grep -q "fmt.Println" "$file" || grep -q "fmt.Print" "$file"; then
        echo -e "${RED}Предупреждение: Найдено использование fmt.Println или fmt.Print в файле: $file${NC}"
    fi
done

cd "$HOME/server/blog-service"
for file in $(find . -type f -name "*.go"); do
    if grep -q "fmt.Println" "$file" || grep -q "fmt.Print" "$file"; then
        echo -e "${RED}Предупреждение: Найдено использование fmt.Println или fmt.Print в файле: $file${NC}"
    fi
done


cd "$HOME/server/user-service"
for file in $(find . -type f -name "*.go"); do
    if grep -q "fmt.Println" "$file" || grep -q "fmt.Print" "$file"; then
        echo -e "${RED}Предупреждение: Найдено использование fmt.Println или fmt.Print в файле: $file${NC}"
    fi
done

cd "$HOME/client-movile"
for file in $(find . -type f \( -name "*.ts" -o -name "*.tsx" \) -not -path "*/node_modules/*"); do
    if grep -q "console.log" "$file"; then
        echo -e "${RED}Предупреждение: Найдено использование console.log в файле: $file${NC}"
    fi
done

cd "$HOME/server/user-service"
make build
size=$(du -sm "$HOME/server/user-service/bin" | cut -f1)
if [ "$size" -gt 555 ]; then
    echo -e "${RED}Ошибка: Размер папки или файла больше 555 МБ: 'server/user-service/bin' (${size} MB)${NC}"
    exit 1
elif [ "$size" -gt 200 ]; then
    echo -e "${YELLOW}Предупреждение: Размер папки или файла больше 200 МБ: 'server/user-service/bin' (${size} MB)${NC}"
else
    echo -e "${GREEN}Размер папки или файла в пределах нормы: 'server/user-service/bin' (${size} MB)${NC}"
fi

cd "$HOME/server/movie-service"
make build
size=$(du -sm "$HOME/server/movie-service/bin" | cut -f1)
if [ "$size" -gt 555 ]; then
    echo -e "${RED}Ошибка: Размер папки или файла больше 555 МБ: 'server/movie-service/bin' (${size} MB)${NC}"
    exit 1
elif [ "$size" -gt 200 ]; then
    echo -e "${YELLOW}Предупреждение: Размер папки или файла больше 200 МБ: 'server/movie-service/bin' (${size} MB)${NC}"
else
    echo -e "${GREEN}Размер папки или файла в пределах нормы: 'server/movie-service/bin' (${size} MB)${NC}"
fi

cd "$HOME/server/blog-service"
make build
size=$(du -sm "$HOME/server/blog-service/bin" | cut -f1)
if [ "$size" -gt 555 ]; then
    echo -e "${RED}Ошибка: Размер папки или файла больше 555 МБ: 'server/blog-service/bin' (${size} MB)${NC}"
    exit 1
elif [ "$size" -gt 200 ]; then
    echo -e "${YELLOW}Предупреждение: Размер папки или файла больше 200 МБ: 'server/blog-service/bin' (${size} MB)${NC}"
else
    echo -e "${GREEN}Размер папки или файла в пределах нормы: 'server/blog-service/bin' (${size} MB)${NC}"
fi

# cd "$HOME/client-mobile"
# # Используем sed для замены 'dev' на 'prod'
# echo -e "${BLUE}Замена dev на prod${NC}"
# if sed -i 's/release: '\''dev'\''/release: '\''prod'\''/' "$HOME/$FILE_CONFIG"; then
#     echo -e "Значение переменной release заменено на prod в $FILE_CONFIG"
# else
#     echo -e "Ошибка: Не удалось заменить значение в файле $FILE_CONFIG."
#     exit 1
# fi

cd "$HOME/server/user-service"
# Используем sed для замены 'Load()' на 'Load(".env.production")'
echo -e "${BLUE}Замена Load() на Load(".env.production")${NC}"
if sed -i.bak 's/godotenv.Load()/godotenv.Load(".env.production")/' "$HOME/$FILE_GO_USER"; then
    echo -e "Значение переменной Load() заменено на Load(".env.production") в $FILE_GO_USER"
else
    echo -e "Ошибка: Не удалось заменить значение в файле $FILE_GO_USER."
    exit 1
fi

cd "$HOME/server/movie-service"
# Используем sed для замены 'Load()' на 'Load(".env.production")'
echo -e "${BLUE}Замена Load() на Load(".env.production")${NC}"
if sed -i.bak 's/godotenv.Load()/godotenv.Load(".env.production")/' "$HOME/$FILE_GO_MOVIE"; then
    echo -e "Значение переменной Load() заменено на Load(".env.production") в $FILE_GO_MOVIE"
else
    echo -e "Ошибка: Не удалось заменить значение в файле $FILE_GO_MOVIE."
    exit 1
fi

cd "$HOME/server/blog-service"
# Используем sed для замены 'Load()' на 'Load(".env.production")'
echo -e "${BLUE}Замена Load() на Load(".env.production")${NC}"
if sed -i.bak 's/godotenv.Load()/godotenv.Load(".env.production")/' "$HOME/$FILE_GO_BLOG"; then
    echo -e "Значение переменной Load() заменено на Load(".env.production") в $FILE_GO_BLOG"
else
    echo -e "Ошибка: Не удалось заменить значение в файле $FILE_GO_BLOG."
    exit 1
fi

cd "$HOME/client-mobile"
pnpm i
pnpm build
size=$(du -sm "$HOME/client-mobile/dist" | cut -f1)
if [ "$size" -gt 555 ]; then
    echo -e "${RED}Ошибка: Размер папки или файла больше 555 МБ: 'client-mobile/dist' (${size} MB)${NC}"
    exit 1
elif [ "$size" -gt 200 ]; then
    echo -e "${YELLOW}Предупреждение: Размер папки или файла больше 200 МБ: 'client-mobile/dist' (${size} MB)${NC}"
else
    echo -e "${GREEN}Размер папки или файла в пределах нормы: 'client-mobile/dist' (${size} MB)${NC}"
fi

echo "Скрипт успешно выполнился!"
